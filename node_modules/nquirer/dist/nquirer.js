'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nconf = undefined;
exports.inquire = inquire;
exports.necessitate = necessitate;
exports.reset = reset;
exports.getQuestions = getQuestions;

var _nconf = require('nconf');

var _nconf2 = _interopRequireDefault(_nconf);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * @module nquirer
 */

var _questions = [];
var _inquirePromiseCache = null;

/**
 * Reference to nconf instance.
 */
var nconf = exports.nconf = _nconf2.default;

/**
 * Resolves to nconf configuration.
 * User will be prompted for missing configuration previously specified
 * by the `necessitate` function. Answers automatically set in nconf.
 * @returns {Promise.<nconf>}
 */
function inquire() {
  if (!_inquirePromiseCache) {
    (function () {

      // find missing questions
      var missingQuestions = [];
      _questions.forEach(function (question) {
        if (!nconf.get(question.name)) {
          missingQuestions.push(question);
        }
      });

      // no missing questions
      if (missingQuestions.length === 0) {
        _inquirePromiseCache = Promise.resolve(nconf);
      }

      // inquire for missing questions
      else {
          _inquirePromiseCache = _inquirer2.default.prompt(missingQuestions).then(function (answers) {
            for (var key in answers) {
              nconf.set(key, answers[key]);
            }
            return nconf;
          });
        }
    })();
  }
  return _inquirePromiseCache;
};

/**
 * Add required configuration options in the form of Inquirer questions.
 * @param {Question[]} questions
 * @see {@link https://github.com/SBoudrias/Inquirer.js/#question|Inquirer Question}
 */
function necessitate(questions) {
  _questions = [].concat(_toConsumableArray(_questions), _toConsumableArray(questions.map(function (question) {
    return Object.assign({}, question);
  })));
};

/**
 * Resets nconf configuration and removes all required configuration options.
 */
function reset() {
  _questions = [];
  _inquirePromiseCache = null;
  nconf.reset();
};

/**
 * Get array of necessary questions.
 * @returns {Question[]}
 */
function getQuestions() {
  return _questions.map(function (currentValue) {
    return Object.assign({}, currentValue);
  });
};